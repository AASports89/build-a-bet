{"ast":null,"code":"import _objectSpread from\"/Users/AramsMac/bootcamp/Projects/build-a-bet/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from'react';import{ApolloClient,InMemoryCache,ApolloProvider,createHttpLink}from'@apollo/client';import{setContext}from'@apollo/client/link/context';import{BrowserRouter as Router,Routes,Route}from'react-router-dom';import Home from'./pages/Home';import Signup from'./pages/Signup';import Login from'./pages/Login';import SingleParlay from'./pages/SingleParlay';import Dashboard from'./pages/Dashboard';import Navbar from'./components/Navbar';import Footer from'./components/Footer';import GameList from'./components/GameList';import Parlays from'./pages/Parlays';import ParlayForm from'./components/ParlayForm';// Construct our main GraphQL API endpoint\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var httpLink=createHttpLink({uri:'/graphql'});// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nvar authLink=setContext(function(_,_ref){var headers=_ref.headers;// get the authentication token from local storage if it exists\nvar token=localStorage.getItem('id_token');// return the headers to the context so httpLink can read them\nreturn{headers:_objectSpread(_objectSpread({},headers),{},{authorization:token?\"Bearer \".concat(token):''})};});var client=new ApolloClient({// Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\nlink:authLink.concat(httpLink),cache:new InMemoryCache()});function App(){return/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsxs(Router,{children:[/*#__PURE__*/_jsx(\"header\",{children:/*#__PURE__*/_jsx(Navbar,{})}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-column justify-flex-start min-100-vh\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Home,{})}),/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(GameList,{})}),/*#__PURE__*/_jsx(Route,{path:\"/ParlayFrom\",element:/*#__PURE__*/_jsx(ParlayForm,{})}),/*#__PURE__*/_jsx(Route,{path:\"/parlays\",element:/*#__PURE__*/_jsx(Parlays,{})}),/*#__PURE__*/_jsx(Route,{path:\"/login\",element:/*#__PURE__*/_jsx(Login,{})}),/*#__PURE__*/_jsx(Route,{path:\"/signup\",element:/*#__PURE__*/_jsx(Signup,{})}),/*#__PURE__*/_jsx(Route,{path:\"/me\",element:/*#__PURE__*/_jsx(Dashboard,{})}),/*#__PURE__*/_jsx(Route,{path:\"/profiles/:username\",element:/*#__PURE__*/_jsx(Dashboard,{})}),/*#__PURE__*/_jsx(Route,{path:\"/parlays/:parlayId\",element:/*#__PURE__*/_jsx(SingleParlay,{})})]})}),/*#__PURE__*/_jsx(Footer,{})]})]})});}export default App;","map":{"version":3,"names":["React","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","BrowserRouter","Router","Routes","Route","Home","Signup","Login","SingleParlay","Dashboard","Navbar","Footer","GameList","Parlays","ParlayForm","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache","App"],"sources":["/Users/AramsMac/bootcamp/Projects/build-a-bet/client/src/App.js"],"sourcesContent":["import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Signup from './pages/Signup';\nimport Login from './pages/Login';\nimport SingleParlay from './pages/SingleParlay';\nimport Dashboard from './pages/Dashboard';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport GameList from './components/GameList';\nimport Parlays from './pages/Parlays';\nimport ParlayForm from './components/ParlayForm';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n      <header>\n      <Navbar />\n      </header>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <div className=\"container\">\n            <Routes>\n           \n              <Route \n                path=\"/\"\n                element={<Home />}\n              />\n               <Route \n                path=\"/\" \n                element={<GameList />}\n              />\n              <Route \n                path=\"/ParlayFrom\" \n                element={<ParlayForm />}\n              />\n              <Route \n                path=\"/parlays\" \n                element={<Parlays />}\n              />\n              <Route \n                path=\"/login\" \n                element={<Login />}\n              />\n              <Route \n                path=\"/signup\" \n                element={<Signup />}\n              />\n              <Route \n                path=\"/me\" \n                element={<Dashboard />}\n              />\n              <Route \n                path=\"/profiles/:username\" \n                element={<Dashboard />}\n              />\n              <Route \n                path=\"/parlays/:parlayId\" \n                element={<SingleParlay />}\n              />\n            </Routes>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"yIAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,OACEC,YAAY,CACZC,aAAa,CACbC,cAAc,CACdC,cAAc,KACT,gBAAgB,CACvB,OAASC,UAAU,KAAQ,6BAA6B,CACxD,OAASC,aAAa,GAAIC,OAAM,CAAEC,MAAM,CAAEC,KAAK,KAAQ,kBAAkB,CAEzE,MAAOC,KAAI,KAAM,cAAc,CAC/B,MAAOC,OAAM,KAAM,gBAAgB,CACnC,MAAOC,MAAK,KAAM,eAAe,CACjC,MAAOC,aAAY,KAAM,sBAAsB,CAC/C,MAAOC,UAAS,KAAM,mBAAmB,CACzC,MAAOC,OAAM,KAAM,qBAAqB,CACxC,MAAOC,OAAM,KAAM,qBAAqB,CACxC,MAAOC,SAAQ,KAAM,uBAAuB,CAC5C,MAAOC,QAAO,KAAM,iBAAiB,CACrC,MAAOC,WAAU,KAAM,yBAAyB,CAEhD;AAAA,wFACA,GAAMC,SAAQ,CAAGhB,cAAc,CAAC,CAC9BiB,GAAG,CAAE,UACP,CAAC,CAAC,CAEF;AACA,GAAMC,SAAQ,CAAGjB,UAAU,CAAC,SAACkB,CAAC,MAAkB,IAAdC,QAAO,MAAPA,OAAO,CACvC;AACA,GAAMC,MAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAC9C;AACA,MAAO,CACLH,OAAO,gCACFA,OAAO,MACVI,aAAa,CAAEH,KAAK,kBAAaA,KAAK,EAAK,EAAE,EAEjD,CAAC,CACH,CAAC,CAAC,CAEF,GAAMI,OAAM,CAAG,GAAI5B,aAAY,CAAC,CAC9B;AACA6B,IAAI,CAAER,QAAQ,CAACS,MAAM,CAACX,QAAQ,CAAC,CAC/BY,KAAK,CAAE,GAAI9B,cAAa,EAC1B,CAAC,CAAC,CAEF,QAAS+B,IAAG,EAAG,CACb,mBACE,KAAC,cAAc,EAAC,MAAM,CAAEJ,MAAO,uBAC7B,MAAC,MAAM,yBACP,qCACA,KAAC,MAAM,IAAG,EACD,cACP,aAAK,SAAS,CAAC,2CAA2C,wBACxD,YAAK,SAAS,CAAC,WAAW,uBACxB,MAAC,MAAM,yBAEL,KAAC,KAAK,EACJ,IAAI,CAAC,GAAG,CACR,OAAO,cAAE,KAAC,IAAI,IAAI,EAClB,cACD,KAAC,KAAK,EACL,IAAI,CAAC,GAAG,CACR,OAAO,cAAE,KAAC,QAAQ,IAAI,EACtB,cACF,KAAC,KAAK,EACJ,IAAI,CAAC,aAAa,CAClB,OAAO,cAAE,KAAC,UAAU,IAAI,EACxB,cACF,KAAC,KAAK,EACJ,IAAI,CAAC,UAAU,CACf,OAAO,cAAE,KAAC,OAAO,IAAI,EACrB,cACF,KAAC,KAAK,EACJ,IAAI,CAAC,QAAQ,CACb,OAAO,cAAE,KAAC,KAAK,IAAI,EACnB,cACF,KAAC,KAAK,EACJ,IAAI,CAAC,SAAS,CACd,OAAO,cAAE,KAAC,MAAM,IAAI,EACpB,cACF,KAAC,KAAK,EACJ,IAAI,CAAC,KAAK,CACV,OAAO,cAAE,KAAC,SAAS,IAAI,EACvB,cACF,KAAC,KAAK,EACJ,IAAI,CAAC,qBAAqB,CAC1B,OAAO,cAAE,KAAC,SAAS,IAAI,EACvB,cACF,KAAC,KAAK,EACJ,IAAI,CAAC,oBAAoB,CACzB,OAAO,cAAE,KAAC,YAAY,IAAI,EAC1B,GACK,EACL,cACN,KAAC,MAAM,IAAG,GACN,GACC,EACM,CAErB,CAEA,cAAeI,IAAG"},"metadata":{},"sourceType":"module"}